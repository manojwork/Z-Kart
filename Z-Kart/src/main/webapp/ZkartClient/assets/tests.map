{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","z-kart/tests/app.lint-test.js","z-kart/tests/helpers/destroy-app.js","z-kart/tests/helpers/module-for-acceptance.js","z-kart/tests/helpers/resolver.js","z-kart/tests/helpers/start-app.js","z-kart/tests/integration/components/add-edit-product-test.js","z-kart/tests/integration/components/add-edit-user-test.js","z-kart/tests/integration/components/admin-nav-bar-lis-test.js","z-kart/tests/integration/components/admin-nav-bar-test.js","z-kart/tests/integration/components/admin-navi-bar-test.js","z-kart/tests/integration/components/alert-pop-test.js","z-kart/tests/integration/components/authentication-layout-test.js","z-kart/tests/integration/components/cart-product-test.js","z-kart/tests/integration/components/change-password-test.js","z-kart/tests/integration/components/customers-table-test.js","z-kart/tests/integration/components/filter-bar-test.js","z-kart/tests/integration/components/homepage-tour-test.js","z-kart/tests/integration/components/loading-component-test.js","z-kart/tests/integration/components/navigation-bar-test.js","z-kart/tests/integration/components/navigation-list-test.js","z-kart/tests/integration/components/order-component-test.js","z-kart/tests/integration/components/order-details-test.js","z-kart/tests/integration/components/orderproducts-table-test.js","z-kart/tests/integration/components/orders-table-test.js","z-kart/tests/integration/components/pop-up-test.js","z-kart/tests/integration/components/poster-banner-test.js","z-kart/tests/integration/components/product-layout-test.js","z-kart/tests/integration/components/products-table-test.js","z-kart/tests/integration/components/search-bar-test.js","z-kart/tests/integration/components/success-order-test.js","z-kart/tests/integration/components/zkart-logo-test.js","z-kart/tests/integration/helpers/compare-stock-count-test.js","z-kart/tests/integration/helpers/compare-test.js","z-kart/tests/integration/helpers/contains-test.js","z-kart/tests/integration/helpers/eq-test.js","z-kart/tests/integration/helpers/format-time-test.js","z-kart/tests/integration/helpers/mul-test.js","z-kart/tests/integration/helpers/order-coupon-test.js","z-kart/tests/integration/helpers/sum-test.js","z-kart/tests/test-helper.js","z-kart/tests/tests.lint-test.js","z-kart/tests/unit/controllers/account-test.js","z-kart/tests/unit/controllers/add-customer-test.js","z-kart/tests/unit/controllers/add-product-test.js","z-kart/tests/unit/controllers/admin-test.js","z-kart/tests/unit/controllers/application-test.js","z-kart/tests/unit/controllers/cart-test.js","z-kart/tests/unit/controllers/changepassword-test.js","z-kart/tests/unit/controllers/edit-product-test.js","z-kart/tests/unit/controllers/edit-user-test.js","z-kart/tests/unit/controllers/edituser-test.js","z-kart/tests/unit/controllers/error-test.js","z-kart/tests/unit/controllers/errorpage-test.js","z-kart/tests/unit/controllers/index-test.js","z-kart/tests/unit/controllers/products/index-test.js","z-kart/tests/unit/controllers/products/product-test.js","z-kart/tests/unit/controllers/products/search-test.js","z-kart/tests/unit/controllers/signin-test.js","z-kart/tests/unit/controllers/signup-test.js","z-kart/tests/unit/routes/about-test.js","z-kart/tests/unit/routes/account-test.js","z-kart/tests/unit/routes/account/index-test.js","z-kart/tests/unit/routes/account/products-test.js","z-kart/tests/unit/routes/add-customer-test.js","z-kart/tests/unit/routes/add-product-test.js","z-kart/tests/unit/routes/admin-test.js","z-kart/tests/unit/routes/cart-test.js","z-kart/tests/unit/routes/changepassword-test.js","z-kart/tests/unit/routes/edit-product-test.js","z-kart/tests/unit/routes/edit-user-test.js","z-kart/tests/unit/routes/error-test.js","z-kart/tests/unit/routes/errorpage-test.js","z-kart/tests/unit/routes/index-test.js","z-kart/tests/unit/routes/products/index-test.js","z-kart/tests/unit/routes/products/product-test.js","z-kart/tests/unit/routes/products/search-test.js","z-kart/tests/unit/routes/signin-test.js","z-kart/tests/unit/routes/signup-test.js","z-kart/tests/unit/services/cart-products-test.js","z-kart/tests/unit/services/filter-store-test.js","z-kart/tests/unit/services/maxproducts-test.js","z-kart/tests/unit/services/passwordcomplexity-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('z-kart/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('Classes/URIClass.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'Classes/URIClass.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/add-edit-product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-edit-product.js should pass ESLint\\n\\n28:13 - Unexpected console statement. (no-console)\\n106:19 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/add-edit-user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/add-edit-user.js should pass ESLint\\n\\n128:13 - Unexpected console statement. (no-console)\\n251:21 - \\'body\\' is already defined. (no-redeclare)\\n261:17 - Unexpected console statement. (no-console)\\n263:21 - \\'uri\\' is already defined. (no-redeclare)\\n268:21 - Unexpected console statement. (no-console)\\n273:25 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/admin-nav-bar-lis.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin-nav-bar-lis.js should pass ESLint\\n\\n21:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/admin-nav-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/admin-nav-bar.js should pass ESLint\\n\\n33:13 - Unexpected console statement. (no-console)\\n92:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/alert-pop.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/alert-pop.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/authentication-layout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/authentication-layout.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/cart-product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/cart-product.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/change-password.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/change-password.js should pass ESLint\\n\\n31:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/customers-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/customers-table.js should pass ESLint\\n\\n35:13 - Unexpected console statement. (no-console)\\n44:13 - Unexpected console statement. (no-console)\\n45:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/filter-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/filter-bar.js should pass ESLint\\n\\n43:7 - Unexpected console statement. (no-console)\\n46:65 - Unnecessary semicolon. (no-extra-semi)\\n48:59 - Unnecessary semicolon. (no-extra-semi)\\n56:63 - Unnecessary semicolon. (no-extra-semi)\\n58:57 - Unnecessary semicolon. (no-extra-semi)\\n88:5 - Unexpected console statement. (no-console)\\n179:19 - Unexpected console statement. (no-console)\\n258:5 - Unexpected console statement. (no-console)\\n289:11 - \\'cat\\' is already defined. (no-redeclare)\\n326:9 - Unexpected console statement. (no-console)\\n350:9 - Unexpected console statement. (no-console)\\n373:9 - Unexpected console statement. (no-console)\\n481:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/homepage-tour.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/homepage-tour.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/loading-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/loading-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/navigation-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/navigation-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/navigation-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/navigation-list.js should pass ESLint\\n\\n19:9 - Unexpected console statement. (no-console)\\n23:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/order-component.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/order-component.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/order-details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/order-details.js should pass ESLint\\n\\n19:13 - Unexpected console statement. (no-console)\\n20:13 - Unexpected console statement. (no-console)\\n21:13 - Unexpected console statement. (no-console)\\n95:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/orderproducts-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/orderproducts-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/orders-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/orders-table.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/pop-up.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/pop-up.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/poster-banner.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/poster-banner.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/product-layout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/product-layout.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/products-table.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/products-table.js should pass ESLint\\n\\n26:13 - Unexpected console statement. (no-console)\\n34:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/search-bar.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/search-bar.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/success-order.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/success-order.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/zkart-logo.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/zkart-logo.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/account.js should pass ESLint\\n\\n11:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/admin.js should pass ESLint\\n\\n170:17 - Unexpected console statement. (no-console)\\n241:21 - Unexpected console statement. (no-console)\\n385:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/application.js should pass ESLint\\n\\n39:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/cart.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/cart.js should pass ESLint\\n\\n12:9 - Unexpected console statement. (no-console)\\n31:9 - Unexpected console statement. (no-console)\\n32:9 - Unexpected console statement. (no-console)\\n204:29 - Unexpected console statement. (no-console)\\n222:21 - Unexpected console statement. (no-console)\\n281:21 - Unexpected console statement. (no-console)\\n308:21 - Unexpected console statement. (no-console)\\n312:21 - Unexpected console statement. (no-console)\\n325:21 - Unexpected console statement. (no-console)\\n346:17 - Unexpected console statement. (no-console)\\n359:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/changepassword.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/changepassword.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/errorpage.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/errorpage.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/products/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/products/index.js should pass ESLint\\n\\n88:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/products/product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/products/product.js should pass ESLint\\n\\n26:9 - Unexpected console statement. (no-console)\\n149:21 - Unexpected console statement. (no-console)\\n155:21 - Unexpected console statement. (no-console)\\n175:17 - Unexpected console statement. (no-console)\\n190:13 - Unexpected console statement. (no-console)\\n206:29 - Unexpected console statement. (no-console)\\n224:21 - Unexpected console statement. (no-console)\\n253:25 - Unexpected console statement. (no-console)\\n262:25 - Unexpected console statement. (no-console)\\n272:21 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/products/search.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/products/search.js should pass ESLint\\n\\n64:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/signin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/signin.js should pass ESLint\\n\\n107:22 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('controllers/signup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'controllers/signup.js should pass ESLint\\n\\n40:17 - Unexpected console statement. (no-console)\\n76:26 - \\'event\\' is defined but never used. (no-unused-vars)\\n276:21 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/contains.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/contains.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/eq.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/eq.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/format-time.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/format-time.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/mul.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/mul.js should pass ESLint\\n\\n7:3 - Unexpected console statement. (no-console)\\n8:3 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/order-coupon.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/order-coupon.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/sum.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/sum.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/about.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/about.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/account.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/account.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/account/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/account/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/account/products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/account/products.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/admin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/admin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n13:11 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/cart.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/cart.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/changepassword.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/changepassword.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/errorpage.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/errorpage.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/products/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/products/product.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/products/product.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/products/search.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/products/search.js should pass ESLint\\n\\n31:7 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('routes/signin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/signin.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/signup.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/signup.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/cart-products.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/cart-products.js should pass ESLint\\n\\n24:17 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/filter-store.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/filter-store.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/passwordcomplexity.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/passwordcomplexity.js should pass ESLint\\n\\n');\n  });\n});","define('z-kart/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n  }\n});","define('z-kart/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'z-kart/tests/helpers/start-app', 'z-kart/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('z-kart/tests/helpers/resolver', ['exports', 'z-kart/resolver', 'z-kart/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('z-kart/tests/helpers/start-app', ['exports', 'z-kart/app', 'z-kart/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('z-kart/tests/integration/components/add-edit-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-edit-product', 'Integration | Component | add edit product', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w9Fc5zLC\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"add-edit-product\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"i95gBNF6\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"add-edit-product\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/add-edit-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('add-edit-user', 'Integration | Component | add edit user', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jwwkeEE+\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"add-edit-user\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"T+jhcBr4\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"add-edit-user\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/admin-nav-bar-lis-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-nav-bar-lis', 'Integration | Component | admin nav bar lis', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wWzz3zj2\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"admin-nav-bar-lis\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"nh/9EJTR\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"admin-nav-bar-lis\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/admin-nav-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-nav-bar', 'Integration | Component | admin nav bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"U/w7jrd0\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"admin-nav-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"cXpxTH5j\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"admin-nav-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/admin-navi-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('admin-navi-bar', 'Integration | Component | admin navi bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4UCjFVtm\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"admin-navi-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"zyL8XFPq\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"admin-navi-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/alert-pop-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('alert-pop', 'Integration | Component | alert pop', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qQoNc+Me\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"alert-pop\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H43Ayj5a\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"alert-pop\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/authentication-layout-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('authentication-layout', 'Integration | Component | authentication layout', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KjE6EA6l\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"authentication-layout\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CQzQ65So\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"authentication-layout\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/cart-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('cart-product', 'Integration | Component | cart product', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jXp5NMyp\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"cart-product\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KKS8qSon\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"cart-product\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/change-password-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('change-password', 'Integration | Component | change password', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uOmIUotY\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"change-password\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"9vZu/0CM\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"change-password\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/customers-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('customers-table', 'Integration | Component | customers table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"gt5/dJx+\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"customers-table\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wyxZuZbK\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"customers-table\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/filter-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('filter-bar', 'Integration | Component | filter bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UJWwn6GG\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"filter-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZTBnWaP1\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"filter-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/homepage-tour-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('homepage-tour', 'Integration | Component | homepage tour', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1VEqgPPv\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"homepage-tour\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"28o6O6Xx\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"homepage-tour\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/loading-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('loading-component', 'Integration | Component | loading component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"o3Iyf2Ya\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"loading-component\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"H5hzFHgC\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"loading-component\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/navigation-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('navigation-bar', 'Integration | Component | navigation bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"94uRl1Kr\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"navigation-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"6Ex0uJmA\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"navigation-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/navigation-list-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('navigation-list', 'Integration | Component | navigation list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"abMiR6qe\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"navigation-list\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"MjG8T/bD\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"navigation-list\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/order-component-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('order-component', 'Integration | Component | order component', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Y69RY6mB\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"order-component\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"S4OgcK0o\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"order-component\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/order-details-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('order-details', 'Integration | Component | order details', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FL+D+1gL\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"order-details\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tywF3fBg\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"order-details\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/orderproducts-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('orderproducts-table', 'Integration | Component | orderproducts table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jLMSxviL\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"orderproducts-table\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eHjisQ1l\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"orderproducts-table\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/orders-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('orders-table', 'Integration | Component | orders table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+3vQyhi9\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"orders-table\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"3w0cUEKt\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"orders-table\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/pop-up-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('pop-up', 'Integration | Component | pop up', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UGpAAkp/\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"pop-up\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"KsoLxidD\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"pop-up\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/poster-banner-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('poster-banner', 'Integration | Component | poster banner', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UQbkPNLx\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"poster-banner\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"AyHwfZnW\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"poster-banner\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/product-layout-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('product-layout', 'Integration | Component | product layout', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FwZ7fuot\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"product-layout\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8vOrQgbZ\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"product-layout\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/products-table-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('products-table', 'Integration | Component | products table', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iLY2sQPa\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"products-table\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Y3r7+jXa\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"products-table\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/search-bar-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('search-bar', 'Integration | Component | search bar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FzvoM0hE\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"search-bar\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jKfMJFsx\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"search-bar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/success-order-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('success-order', 'Integration | Component | success order', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0pHoXA1H\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"success-order\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"gmnYy1Jh\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"success-order\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/components/zkart-logo-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('zkart-logo', 'Integration | Component | zkart logo', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"sHLefnHJ\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"zkart-logo\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qJQlqbYT\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"zkart-logo\\\"],null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('z-kart/tests/integration/helpers/compare-stock-count-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('compare-stock-count', 'helper:compare-stock-count', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"CCJnD+7a\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"compare-stock-count\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/compare-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('compare', 'helper:compare', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"8OHtpfB/\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"compare\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/contains-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('contains', 'helper:contains', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"XBuLjKpc\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"contains\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/eq-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('eq', 'helper:eq', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"1SYOrDlN\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"eq\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/format-time-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('format-time', 'helper:format-time', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jGwYvE1s\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"format-time\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/mul-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('mul', 'helper:mul', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"20UZKLBN\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"mul\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/order-coupon-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('order-coupon', 'helper:order-coupon', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"pfOjnMML\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"order-coupon\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/integration/helpers/sum-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('sum', 'helper:sum', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TZAJT03u\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"sum\\\"],[[28,[\\\"inputValue\\\"]]],null],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('z-kart/tests/test-helper', ['z-kart/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('z-kart/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-edit-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-edit-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/add-edit-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/add-edit-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-nav-bar-lis-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-nav-bar-lis-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-nav-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-nav-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/admin-navi-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/admin-navi-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/alert-pop-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/alert-pop-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/authentication-layout-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/authentication-layout-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/cart-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/cart-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/change-password-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/change-password-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/customers-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/customers-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/filter-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/filter-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/homepage-tour-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/homepage-tour-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/loading-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/loading-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/navigation-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/navigation-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/navigation-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/navigation-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/order-component-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/order-component-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/order-details-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/order-details-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/orderproducts-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/orderproducts-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/orders-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/orders-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/pop-up-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/pop-up-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/poster-banner-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/poster-banner-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/product-layout-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/product-layout-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/products-table-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/products-table-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/search-bar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/search-bar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/success-order-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/success-order-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/zkart-logo-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/zkart-logo-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/compare-stock-count-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/compare-stock-count-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/compare-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/compare-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/contains-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/contains-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/eq-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/eq-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/format-time-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/format-time-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/mul-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/mul-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/order-coupon-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/order-coupon-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/sum-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/sum-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/account-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/account-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/add-customer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/add-customer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/add-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/add-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/cart-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/cart-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/changepassword-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/changepassword-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edit-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/edituser-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edituser-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/errorpage-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/errorpage-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/products/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/products/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/products/product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/products/product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/products/search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/products/search-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/signin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/signin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/signup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/signup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/about-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/about-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/account-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/account-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/account/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/account/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/account/products-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/account/products-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/add-customer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/add-customer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/add-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/add-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/admin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/admin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/cart-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/cart-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/changepassword-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/changepassword-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/edit-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/errorpage-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/errorpage-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/products/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/products/product-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products/product-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/products/search-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/products/search-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/signin-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signin-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/signup-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/signup-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/cart-products-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/cart-products-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/filter-store-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/filter-store-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/maxproducts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/maxproducts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/passwordcomplexity-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/passwordcomplexity-test.js should pass ESLint\\n\\n');\n  });\n});","define('z-kart/tests/unit/controllers/account-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:account', 'Unit | Controller | account', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/add-customer-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:add-customer', 'Unit | Controller | add customer', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/add-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:add-product', 'Unit | Controller | add product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:admin', 'Unit | Controller | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/cart-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:cart', 'Unit | Controller | cart', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/changepassword-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:changepassword', 'Unit | Controller | changepassword', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/edit-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:edit-product', 'Unit | Controller | edit product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/edit-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:edit-user', 'Unit | Controller | edit user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/edituser-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:edituser', 'Unit | Controller | edituser', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/error-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:error', 'Unit | Controller | error', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/errorpage-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:errorpage', 'Unit | Controller | errorpage', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:index', 'Unit | Controller | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/products/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:products/index', 'Unit | Controller | products/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/products/product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:products/product', 'Unit | Controller | products/product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/products/search-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:products/search', 'Unit | Controller | products/search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/signin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:signin', 'Unit | Controller | signin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/controllers/signup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:signup', 'Unit | Controller | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('z-kart/tests/unit/routes/about-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:about', 'Unit | Route | about', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/account-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:account', 'Unit | Route | account', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/account/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:account/index', 'Unit | Route | account/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/account/products-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:account/products', 'Unit | Route | account/products', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/add-customer-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:add-customer', 'Unit | Route | add customer', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/add-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:add-product', 'Unit | Route | add product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/admin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:admin', 'Unit | Route | admin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/cart-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:cart', 'Unit | Route | cart', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/changepassword-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:changepassword', 'Unit | Route | changepassword', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/edit-product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:edit-product', 'Unit | Route | edit product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/edit-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:edit-user', 'Unit | Route | edit user', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/error-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:error', 'Unit | Route | error', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/errorpage-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:errorpage', 'Unit | Route | errorpage', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/products/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:products/index', 'Unit | Route | products/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/products/product-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:products/product', 'Unit | Route | products/product', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/products/search-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:products/search', 'Unit | Route | products/search', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/signin-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:signin', 'Unit | Route | signin', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/routes/signup-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:signup', 'Unit | Route | signup', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('z-kart/tests/unit/services/cart-products-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:cart-products', 'Unit | Service | cart products', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('z-kart/tests/unit/services/filter-store-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:filter-store', 'Unit | Service | filter store', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('z-kart/tests/unit/services/maxproducts-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:maxproducts', 'Unit | Service | maxproducts', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('z-kart/tests/unit/services/passwordcomplexity-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:passwordcomplexity', 'Unit | Service | passwordcomplexity', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('z-kart/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingslVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClnfile":"tests.js"}